# Generated by Django 5.2.7 on 2025-10-12 14:50

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("destinations", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ServiceProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(max_length=200)),
                ("slug", models.SlugField(blank=True, max_length=220, unique=True)),
                ("description", models.TextField()),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="provider_logos/"
                    ),
                ),
                (
                    "banner_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="provider_banners/"
                    ),
                ),
                ("contact_email", models.EmailField(max_length=254)),
                ("contact_phone", models.CharField(max_length=20)),
                ("website", models.URLField(blank=True)),
                ("address", models.TextField()),
                (
                    "business_registration_number",
                    models.CharField(blank=True, max_length=100),
                ),
                ("tax_id", models.CharField(blank=True, max_length=100)),
                (
                    "is_approved",
                    models.BooleanField(
                        default=False, help_text="Admin approval status"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Business verification status"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="providers",
                        to="destinations.destination",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        limit_choices_to={"user_type": "operator"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Service Provider",
                "verbose_name_plural": "Service Providers",
                "ordering": ["company_name"],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "plan",
                    models.CharField(
                        choices=[
                            ("free", "Free Plan"),
                            ("basic", "Basic Plan"),
                            ("professional", "Professional Plan"),
                            ("enterprise", "Enterprise Plan"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                            ("suspended", "Suspended"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "monthly_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "max_services",
                    models.PositiveIntegerField(
                        default=5, help_text="Maximum number of services allowed"
                    ),
                ),
                ("max_bookings_per_month", models.PositiveIntegerField(default=100)),
                ("analytics_enabled", models.BooleanField(default=False)),
                ("priority_support", models.BooleanField(default=False)),
                ("featured_listing", models.BooleanField(default=False)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("last_payment_date", models.DateTimeField(blank=True, null=True)),
                ("next_billing_date", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="services.serviceprovider",
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TourService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(blank=True, max_length=220, unique=True)),
                ("description", models.TextField()),
                ("short_description", models.CharField(blank=True, max_length=200)),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("tour", "Guided Tour"),
                            ("activity", "Activity"),
                            ("transport", "Transport"),
                            ("accommodation", "Accommodation"),
                            ("dining", "Dining"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("USD", "US Dollar"),
                            ("EUR", "Euro"),
                            ("GBP", "British Pound"),
                            ("KES", "Kenyan Shilling"),
                            ("TZS", "Tanzanian Shilling"),
                            ("ZAR", "South African Rand"),
                        ],
                        default="USD",
                        max_length=3,
                    ),
                ),
                (
                    "child_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "group_discount_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Discount percentage for groups (e.g., 10 for 10%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_capacity",
                    models.PositiveIntegerField(
                        default=1, help_text="Maximum number of guests per booking"
                    ),
                ),
                (
                    "min_capacity",
                    models.PositiveIntegerField(
                        default=1, help_text="Minimum number of guests required"
                    ),
                ),
                (
                    "duration_hours",
                    models.DecimalField(
                        decimal_places=2, help_text="Duration in hours", max_digits=5
                    ),
                ),
                ("meeting_point", models.CharField(blank=True, max_length=255)),
                (
                    "meeting_point_latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "meeting_point_longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("featured_image", models.ImageField(upload_to="services/")),
                (
                    "gallery_images",
                    models.JSONField(
                        blank=True, default=list, help_text="Array of image URLs"
                    ),
                ),
                ("video_url", models.URLField(blank=True)),
                (
                    "included_items",
                    models.TextField(
                        blank=True, help_text="What's included (one per line)"
                    ),
                ),
                (
                    "excluded_items",
                    models.TextField(
                        blank=True, help_text="What's not included (one per line)"
                    ),
                ),
                (
                    "requirements",
                    models.TextField(
                        blank=True, help_text="Requirements for participants"
                    ),
                ),
                ("cancellation_policy", models.TextField(blank=True)),
                ("meta_title", models.CharField(blank=True, max_length=60)),
                ("meta_description", models.CharField(blank=True, max_length=160)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "amenities",
                    models.ManyToManyField(
                        blank=True, related_name="services", to="destinations.amenity"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="services",
                        to="destinations.category",
                    ),
                ),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="destinations.destination",
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="services.serviceprovider",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tour Service",
                "verbose_name_plural": "Tour Services",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Inventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("available_slots", models.PositiveIntegerField()),
                ("booked_slots", models.PositiveIntegerField(default=0)),
                (
                    "blocked_slots",
                    models.PositiveIntegerField(
                        default=0, help_text="Manually blocked slots"
                    ),
                ),
                (
                    "price_override",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Override base price for this specific date",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("is_available", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory",
                        to="services.tourservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory",
                "verbose_name_plural": "Inventories",
                "ordering": ["date"],
            },
        ),
        migrations.CreateModel(
            name="AvailabilitySchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("monday", models.BooleanField(default=False)),
                ("tuesday", models.BooleanField(default=False)),
                ("wednesday", models.BooleanField(default=False)),
                ("thursday", models.BooleanField(default=False)),
                ("friday", models.BooleanField(default=False)),
                ("saturday", models.BooleanField(default=False)),
                ("sunday", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availabilities",
                        to="services.tourservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Availability Schedule",
                "verbose_name_plural": "Availability Schedules",
                "ordering": ["start_date"],
            },
        ),
        migrations.AddIndex(
            model_name="serviceprovider",
            index=models.Index(fields=["slug"], name="services_se_slug_ed75bd_idx"),
        ),
        migrations.AddIndex(
            model_name="serviceprovider",
            index=models.Index(
                fields=["is_approved", "is_verified"],
                name="services_se_is_appr_6545a5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tourservice",
            index=models.Index(fields=["slug"], name="services_to_slug_358614_idx"),
        ),
        migrations.AddIndex(
            model_name="tourservice",
            index=models.Index(
                fields=["service_type", "destination"],
                name="services_to_service_7addb3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tourservice",
            index=models.Index(
                fields=["is_active", "is_featured"],
                name="services_to_is_acti_2441ee_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tourservice",
            index=models.Index(
                fields=["provider", "is_active"], name="services_to_provide_8843e9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="inventory",
            index=models.Index(
                fields=["service", "date"], name="services_in_service_f3a45d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="inventory",
            index=models.Index(
                fields=["date", "is_available"], name="services_in_date_953595_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="inventory",
            unique_together={("service", "date")},
        ),
    ]
